# ==========================================
# 🛡️ SafeTalk — 보이스피싱·스미싱 예방 퀴즈 (Pure Streamlit)
# - 로그인/DB/타이머 제거, 퀴즈 집중
# - 난이도별 10문항 자동생성(중복/단조 옵션 방지)
# - 제출→해설/링크 노출→다음 문제 진행
# ==========================================
import random
import streamlit as st

# ----------------------------
# 스타일: 모든 텍스트/입력 검정, 드롭다운/라디오 가시성 고정
# ----------------------------
st.set_page_config(page_title="SafeTalk Quiz", page_icon="🛡️", layout="centered")
st.markdown("""
<style>
:root { --st-fg: #111; --st-bg: #f7faff; }
.stApp { background: var(--st-bg) !important; color: var(--st-fg) !important; }
*, div, p, span, label, h1, h2, h3, h4, h5, h6 { color: var(--st-fg) !important; }
[data-testid="stMarkdownContainer"] * { color: var(--st-fg) !important; }
[data-testid="stText"], [data-testid="stNumberInput"] input,
[data-testid="stTextInput"] input, textarea {
  color:#111 !important; background:#fff !important; border:1.5px solid #aab6ff !important;
}
.stButton>button {
  background: linear-gradient(90deg,#2563eb,#1d4ed8) !important; color:#fff !important;
  border:none !important; border-radius:10px !important; padding:10px 18px !important; font-weight:700 !important;
}
.stRadio > div[role="radiogroup"] label div[data-testid="stMarkdownContainer"] p { margin: 0 !important; }
.stRadio > div[role="radiogroup"] label { gap:.5rem !important; }
[data-baseweb="select"], [data-baseweb="select"] * { color:#111 !important; background:#fff !important; }
[data-baseweb="popover"] { background:#fff !important; color:#111 !important; }
[data-baseweb="option"] { color:#111 !important; background:#fff !important; }
[data-baseweb="option"]:hover { background:#e9efff !important; }
.card { background:#fff; border-radius:18px; padding:28px; box-shadow:0 6px 25px rgba(0,0,0,.08); }
.badge { display:inline-block; padding:.2rem .55rem; border-radius:999px; font-size:.75rem; border:1px solid #dbe3ff; background:#f3f6ff; }
</style>
""", unsafe_allow_html=True)

# ----------------------------
# 상단 헤더
# ----------------------------
st.markdown("""
<div style="text-align:center;margin-top:10px">
  <img src="https://cdn-icons-png.flaticon.com/512/9746/9746595.png" width="70"/>
  <h1 style="font-weight:900;margin:.4rem 0">SafeTalk — 보이스피싱·스미싱 예방 퀴즈</h1>
  <p style="color:#334155">시나리오 · 난이도 선택 → 제출 후 해설/신고 링크 확인 → 다음 문제</p>
</div>
""", unsafe_allow_html=True)

# ----------------------------
# 신고/확인 공식 링크 (해설에서 사용)
# ----------------------------
LINKS = {
    "police": "[경찰 112](tel:112)",
    "fss": "[금융감독원 1332](tel:1332)",
    "kisa": "[KISA 118 사이버민원](https://www.kisa.or.kr/jsp/contents/contact/cyber.jsp)",
    "hometax": "[국세청 홈택스](https://www.hometax.go.kr)",
    "cj": "[CJ대한통운 고객센터](https://www.cjlogistics.com/ko/tool/customerService)",
    "epass": "[교통민원24 eFINE](https://www.efine.go.kr/)",
    "nhis": "[국민건강보험공단(1577-1000)](https://www.nhis.or.kr)",
    "fsc_notice": "[금융사기 예방 안내](https://www.fss.or.kr/)",
}

# ----------------------------
# 핵심 문항 뼈대 (난이도별 베이스)
# 각 항목: (질문, 보기리스트, 정답인덱스, 해설키워드)
#   해설은 아래 explain()에서 링크와 함께 생성
# ----------------------------
BASE = {
    "택배 스미싱": {
        "easy": [
            ("‘배송지 오류로 반송 중’ 문자를 받았다. 올바른 1차 대응은?",
             ["문자 링크로 즉시 수정", "택배사 공식 고객센터로 직접 문의", "보낸 번호로 전화해 확인"], 1, "택배-대표"),
            ("‘국제특송 통관번호 오류’는 보통 어떤 심리를 노린다?",
             ["긴급/불안", "보상심리", "관심유도"], 0, "심리"),
            ("‘배송 조회 위해 앱 설치’ 요구의 목적은?",
             ["편의 제공", "악성앱 설치 유도", "프로모션"], 1, "악성앱"),
            ("‘배송 중 문제 발생’ 문자를 받으면 가장 안전한 절차는?",
             ["문자 링크 클릭", "공식앱/웹에서 직접 조회", "메시지 회신"], 1, "택배-대표"),
            ("스미싱 문자에서 의심 신호가 아닌 것은?",
             ["단축URL/긴급 문구", "개인정보 입력 유도", "정식 도메인+대표번호 안내"], 2, "정식도메인"),
        ],
        "normal": [
            ("‘주소불명/반송/통관번호’ 조합의 핵심 목적은?",
             ["법적조치 고지", "개인/결제정보 탈취", "만족도 조사"], 1, "정보탈취"),
            ("링크를 눌렀더니 로그인 페이지가 떴다. 가장 먼저 확인할 항목은?",
             ["브라우저 테마", "주소창 도메인", "폰트"], 1, "도메인"),
            ("배송사 사칭 스미싱을 줄이는 습관으로 옳은 것은?",
             ["문자 링크 즉시 확인", "검색한 대표번호로 재통화", "메시지 회신 요청"], 1, "대표번호"),
            ("‘쿠폰/포인트 지급’을 내세운 배송 문자, 위험 이유는?",
             ["광고일 뿐", "자금 탈취형 유도", "실수로 발송"], 1, "정보탈취"),
            ("의심 문자를 수신했다. 신고/상담 창구는?",
             ["지인", "커뮤니티", "112/1332/118"], 2, "신고"),
        ],
        "hard": [
            ("안드로이드에서 외부 APK 설치를 허용하면 왜 위험한가?",
             ["설치가 느려짐", "악성코드 권한 상승 가능", "배터리 소모"], 1, "악성앱"),
            ("피싱 페이지에서 ‘https 자물쇠’만 보고 안심하면 안 되는 이유는?",
             ["의미 없음", "피싱도 TLS를 쓸 수 있음", "브라우저 버그"], 1, "도메인"),
            ("‘안전결제/보호이체’ 안내의 본질은?",
             ["일시 대피 수단", "자금 탈취 수법", "합법적 절차"], 1, "보호이체"),
            ("문자 내 ‘고객센터’ 번호가 대표번호와 다르다. 대응은?",
             ["그 번호로 통화", "검색한 대표번호로 재확인", "문자 회신 요청"], 1, "대표번호"),
            ("실제 배송 지연 중이라도 링크 클릭이 위험한 이유는?",
             ["서버 과부하", "도메인 위장+악성앱 유도", "광고 과다"], 1, "도메인"),
        ],
    },
    "공공기관 사칭": {
        "easy": [
            ("‘[경찰청] 범칙금 통지서 발송’ 문자를 받았다. 확인 방법은?",
             ["문자 URL 클릭", "공식 사이트(교통민원24)에서 직접 확인", "지인에게 확인"], 1, "교통민원"),
            ("정부기관은 문자/전화로 송금을 요구할 수 있다(O/X)",
             ["O", "X", "상황에 따라"], 1, "송금불가"),
            ("건보공단 실제 안내에 포함될 법한 정보는?",
             ["대표전화/공식 도메인", "개인 계좌번호", "앱 설치 파일"], 0, "건보"),
            ("‘세금 환급’ 안내를 받았다. 어디서 확인?",
             ["문자 링크", "국세청 홈택스", "발신번호 회신"], 1, "홈택스"),
            ("기관 사칭 의심 시 1순위 조치는?",
             ["통화 유지", "즉시 개인정보 제공", "공식 대표번호로 재확인"], 2, "대표번호"),
        ],
        "normal": [
            ("수사기관 사칭 전화의 전형적 특징은?",
             ["통화 중 송금/이체 요구", "방문 안내", "공문 이메일"], 0, "송금불가"),
            ("‘사건번호 확인’이라며 링크 접속 요구. 우선 확인할 것?",
             ["링크 디자인", "도메인/인증 수단", "폰트"], 1, "도메인"),
            ("세금 체납 문자를 받은 경우 잘못된 대응은?",
             ["홈택스 직접 확인", "문자 링크 접속", "대표번호 재통화"], 1, "홈택스"),
            ("사칭 전화가 의심될 때 올바른 종료법은?",
             ["바로 끊고 대표번호로 새 통화", "상대에게 화내기", "계속 듣기"], 0, "대표번호"),
            ("신고/상담 창구로 적절한 곳은?",
             ["112/1332/118", "지인", "SNS"], 0, "신고"),
        ],
        "hard": [
            ("‘안전계좌로 이체’ 요구가 항상 허위인 이유는?",
             ["임시절차", "법상 그런 계좌는 없음", "일부 합법"], 1, "보호이체"),
            ("기관 사칭 링크가 https라도 위험한 핵심 이유는?",
             ["https는 의미 없음", "도메인 자체가 위장 가능", "폰트 문제"], 1, "도메인"),
            ("통화 중 설치를 권하는 앱의 용도는 대체로?",
             ["보안강화", "원격제어/갈취", "설정백업"], 1, "악성앱"),
            ("‘공동조사팀’ 명목의 송금 요구는?",
             ["합법", "자금 탈취 수법", "일반적 관행"], 1, "보호이체"),
            ("기관 사칭 예방 습관으로 틀린 것은?",
             ["링크 대신 직접 접속", "대표번호 재확인", "발신번호 저장"], 2, "대표번호"),
        ],
    },
    "가족/지인 사칭": {
        "easy": [
            ("‘엄마 폰 고장… 급히 돈 필요’ 문자를 받았다. 먼저 할 일은?",
             ["바로 송금", "전화로 본인 확인", "카톡 메시지로만 확인"], 1, "본인확인"),
            ("지인 사칭이 잘 통하는 이유는?",
             ["야밤 전송", "가족 신뢰+긴급성 악용", "010 번호"], 1, "심리"),
            ("모바일 청첩장 스미싱의 대표 특징은?",
             ["친근한 경조사 링크", "해외배송 위장", "은행 로그인 연결"], 0, "링크주의"),
            ("프로필/이름이 같아도 확인해야 하는 것?",
             ["대화 길이", "음성/영상 본인 확인", "이모티콘"], 1, "본인확인"),
            ("지인 사칭 의심 시 하지 말아야 할 일은?",
             ["전화로 확인", "링크 접속", "대표번호 문의"], 1, "링크주의"),
        ],
        "normal": [
            ("가족 사칭이 특히 취약한 시간대 이유는?",
             ["업무시간", "심리적 경계 약함(야간/주말)", "점심시간"], 1, "심리"),
            ("‘휴대폰 고장이라 링크로 대화’ 요구의 목적은?",
             ["보안채널", "피싱 페이지 유도", "사진 공유"], 1, "링크주의"),
            ("지인 사칭 피해를 줄이는 습관은?",
             ["영상통화/음성확인", "문자 회신", "SNS 확인"], 0, "본인확인"),
            ("계좌이체 전 반드시 해야 할 절차는?",
             ["입금 메모 남기기", "다른 채널로 본인확인", "ATM 사용"], 1, "본인확인"),
            ("신고/상담 창구로 알맞은 곳은?",
             ["112/1332", "학교 행정실", "SNS"], 0, "신고"),
        ],
        "hard": [
            ("딥페이크/프로필 도용형 사칭에 유효한 검증은?",
             ["문자 맞춤법 검사", "실시간 음성/영상 확인", "프로필 사진 확대"], 1, "본인확인"),
            ("‘검증된 에스크로’라며 링크 결제 유도. 위험 본질은?",
             ["결제 편의", "가짜 에스크로로 자금 탈취", "포인트 제공"], 1, "정보탈취"),
            ("‘공동구매 입금’ 지시에 대한 올바른 대응은?",
             ["즉시 송금", "전화 연결로 본인확인", "문자 보관"], 1, "본인확인"),
            ("가족 사칭 의심을 확정하는 신호는?",
             ["돈 요구+긴급성+외부 링크", "인사말", "맞춤법"], 0, "심리"),
            ("지속적 연락 요구와 시간 압박이 의미하는 바는?",
             ["배려", "의사결정 차단 시도", "신뢰"], 1, "심리"),
        ],
    },
    "금융/대출 사칭": {
        "easy": [
            ("은행이 문자로 대출 권유/송금 요청을 한다(O/X)",
             ["O","X","상황에 따라"], 1, "송금불가"),
            ("‘정부 긴급대출 오늘 마감’ 문구의 목적은?",
             ["정보 제공", "시간 압박 유도", "제도 안내"], 1, "심리"),
            ("금융 스미싱의 흔한 수법은?",
             ["앱 설치 유도 후 악성코드", "쿠폰 발송", "홍보"], 0, "악성앱"),
            ("대출 조회/상담은 어디서 해야 안전한가?",
             ["링크 클릭", "은행 공식 앱/콜센터", "SNS DM"], 1, "대표번호"),
            ("‘상환유예 수수료 송금’ 요구의 본질은?",
             ["정상 절차", "자금 탈취", "이벤트"], 1, "보호이체"),
        ],
        "normal": [
            ("저금리 변경을 미끼로 요구하는 정보는?",
             ["주민번호/공동인증서", "닉네임", "주소록"], 0, "정보탈취"),
            ("‘보안 강화를 위해 원격앱 설치’ 요구의 목적은?",
             ["도움", "원격통제·갈취", "설정이전"], 1, "악성앱"),
            ("금융사칭 의심 시 가장 신뢰할 채널은?",
             ["검색한 대표번호 재통화", "문자 회신", "이메일 회신"], 0, "대표번호"),
            ("계약서/이율 안내 파일이 첨부되었을 때 조치?",
             ["바로 열람", "출처 확인+공식 채널 재수신", "프린트"], 1, "도메인"),
            ("신고/상담 창구는?",
             ["1332/112", "지인", "커뮤니티"], 0, "신고"),
        ],
        "hard": [
            ("‘보호계좌/안전계좌’로 대피 송금 요구가 허위인 이유는?",
             ["특수제도", "존재하지 않는 개념", "한시적 허용"], 1, "보호이체"),
            ("피싱 페이지에서 ‘https’만 보고 안심하면 안 되는 이유?",
             ["TLS 무용", "도메인 위장 가능", "폰트"], 1, "도메인"),
            ("원격 앱 설치 후 나타나는 전형적 피해는?",
             ["화면 밝기 상승", "계좌/공동인증서 탈취", "통화 품질 저하"], 1, "악성앱"),
            ("금융앱 외부 설치(사이드로딩) 위험 핵심은?",
             ["설치 편의", "권한 남용/우회", "업데이트 지연"], 1, "악성앱"),
            ("대출 심사라며 공동인증서/OTP 요구. 바른 대응은?",
             ["바로 제공", "거절 후 공식 채널 재문의", "문자 회신"], 1, "대표번호"),
        ],
    },
    "보이스피싱 심화": {
        "easy": [
            ("‘계좌가 범죄에 이용’ 발언이 노리는 감정은?",
             ["공포/불안", "보상심리", "관심유도"], 0, "심리"),
            ("경찰관 사칭 전화의 전형적 특징은?",
             ["통화 중 송금/이체 요구", "방문 안내", "공문 이메일"], 0, "송금불가"),
            ("‘피싱 예방센터, 정보 재확인’ 문구의 위험성은?",
             ["공식일 수 있음", "개인정보 탈취 가능성 큼", "통신사 점검"], 1, "정보탈취"),
            ("의심 통화 종료 후 가장 먼저 할 일은?",
             ["상대에게 항의", "대표번호로 재확인", "문자 회신"], 1, "대표번호"),
            ("신고/상담 기본 창구는?",
             ["112/1332/118", "114", "지인"], 0, "신고"),
        ],
        "normal": [
            ("‘사건 연루’ 협박형 통화의 공통 전술은?",
             ["시간 압박/의사결정 차단", "친절한 상담", "경품 제공"], 0, "심리"),
            ("통화 중에 앱 설치·화면 공유를 요구하는 이유는?",
             ["도움", "원격제어/갈취", "보안강화"], 1, "악성앱"),
            ("사칭이 의심될 때 이메일/문서의 가장 중요한 검증은?",
             ["서체", "보낸 사람 주소/도메인", "줄간격"], 1, "도메인"),
            ("‘임시 보관금’ 이체 요구는 왜 위험한가?",
             ["승인 지연", "자금 탈취 수법", "수수료 발생"], 1, "보호이체"),
            ("피해 최소화를 위한 즉시 조치는?",
             ["계좌 지급정지+112/1332 신고", "내일 은행 방문", "메시지 보관"], 0, "신고"),
        ],
        "hard": [
            ("‘공동조사팀’/‘합동수사반’ 명목 송금 요구의 법적 실체는?",
             ["합법", "허위", "일부 허용"], 1, "보호이체"),
            ("원격제어 앱으로 탈취 가능한 정보는?",
             ["날씨", "인증서/계좌/문자", "배터리"], 1, "악성앱"),
            ("https 환경에서도 피싱이 가능한 이유는?",
             ["TLS 무용", "도메인 위장 가능", "브라우저 오류"], 1, "도메인"),
            ("수사기관은 전화로 무엇을 절대 요구하지 않는다?",
             ["사실확인", "송금/계좌이체", "방문"], 1, "송금불가"),
            ("거짓 링크로 받은 고지서/영수증의 공통 특징은?",
             ["정식 도메인/서명", "도메인 위장+개인정보 과다 요구", "QR 미포함"], 1, "도메인"),
        ],
    },
}

# ----------------------------
# 보기 다양화 풀(자동 생성용)
# ----------------------------
OPTION_POOLS = {
    "택배 스미싱": [
        ["링크 클릭", "공식앱/웹으로 직접 확인", "검색한 대표번호로 문의"],
        ["보낸 번호로 회신", "대표번호 재통화", "QR로 접속"],
        ["주소 재입력", "택배사 고객센터", "메시지 공유"],
    ],
    "공공기관 사칭": [
        ["문자 URL", "공식 사이트 직접 확인", "대표번호로 확인"],
        ["통화 유지", "112 신고", "1332 상담"],
        ["링크 접속", "도메인 확인", "문서번호 검증"],
    ],
    "가족/지인 사칭": [
        ["바로 송금", "음성/영상으로 본인 확인", "카톡으로만 대화"],
        ["프로필만 확인", "전화로 재확인", "링크 대화"],
        ["링크 결제", "계좌 공유", "대표번호 문의"],
    ],
    "금융/대출 사칭": [
        ["링크 상담", "은행 공식 앱/콜센터", "SNS DM"],
        ["보호계좌 송금", "대표번호 재확인", "원격앱 설치"],
        ["원격앱 설치", "인증서 제공", "서류 재요청"],
    ],
    "보이스피싱 심화": [
        ["즉시 송금", "통화 종료→대표번호 재확인", "문자 회신"],
        ["앱 설치", "도메인 확인", "신고 112/1332"],
        ["링크 접속", "의심 기록 보관", "가까운 지구대 방문"],
    ],
}

# ----------------------------
# 해설 생성기 (링크 포함)
# ----------------------------
def explain(scenario: str, key: str) -> str:
    L = LINKS
    if key == "택배-대표":
        return f"택배사는 문자 링크로 주소 수정을 요구하지 않습니다. 반드시 공식 앱/웹 또는 {L['cj']}로 직접 확인하세요."
    if key == "심리":
        return "스미싱·피싱은 대체로 **긴급/불안/권위**를 이용해 판단을 흐리게 합니다. 잠시 멈추고 공식 채널로 재확인하세요."
    if key == "악성앱":
        return f"문자/통화로 **앱 설치**를 유도하면 악성코드·원격제어로 이어질 수 있어요. 설치했다면 즉시 삭제·백신 검사 후 {L['police']} / {L['fss']} 상담."
    if key == "정식도메인":
        return "정식 도메인/대표번호/명확한 회신 절차가 있는지 보세요. 애매한 링크·단축URL은 피하세요."
    if key == "정보탈취":
        return f"핵심 목적은 **개인/결제정보 탈취**입니다. 피해 발생 시 즉시 **지급정지→{L['police']} / {L['fss']} 신고**, 스미싱은 {L['kisa']} 에도 신고."
    if key == "도메인":
        return "자물쇠(https)만 믿지 말고 **주소창의 정확한 도메인**을 확인하세요. 철자/하위도메인 위장 주의."
    if key == "대표번호":
        return "수신한 번호/링크는 신뢰하지 말고 **검색해서 나온 공식 대표번호로 새 통화**를 해야 안전합니다."
    if key == "보호이체":
        return "‘보호/안전계좌’는 **사기 수법**입니다. 수사기관·은행은 **전화로 송금**을 요구하지 않습니다. 즉시 {pol}/{fss} 상담.".format(pol=L["police"], fss=L["fss"])
    if key == "교통민원":
        return f"교통범칙금은 문자 URL 대신 **{L['epass']}** 등 **공식 사이트**에서 확인하세요."
    if key == "송금불가":
        return "정부·수사기관은 전화/문자로 **송금/이체**를 요구하지 않습니다. 요구 시 100% 의심하세요."
    if key == "건보":
        return f"건보공단은 **대표전화/공식 도메인**을 안내합니다. 의심 시 {L['nhis']}으로 재확인하세요."
    if key == "홈택스":
        return f"세금 환급/체납은 반드시 **{L['hometax']}**에서 직접 확인하세요."
    if key == "본인확인":
        return "가족/지인 사칭은 **전화/영상통화**로 **본인 확인**이 최우선입니다. 문자는 쉽게 위조됩니다."
    if key == "링크주의":
        return "경조사/대화 전환을 미끼로 링크를 누르게 합니다. 링크 대신 전화로 본인 확인!"
    # fallback
    return "의심되면 링크/송금 금지 → 대표번호 재확인 → 112/1332/118에 신고하세요."

# ----------------------------
# 10문항 자동 확장 (베이스 5개 + 가변 5개)
# - 보기 다양화/셔플로 단조로움 방지
# ----------------------------
def build_ten(scenario: str, difficulty: str):
    base = BASE[scenario][difficulty][:]
    # 가변 5문항 생성
    pool = OPTION_POOLS[scenario]
    variants = []
    seeds = [
        ("의심 문자를 받았을 때 가장 먼저 할 일은?", [0,1,2], "대표번호"),
        ("링크 접속 전 반드시 확인할 것은?", [1,2,0], "도메인"),
        ("송금 요구를 받았을 때 올바른 대응은?", [2,1,0], "송금불가"),
        ("앱 설치/원격 제어 요구의 목적은?", [1,2,0], "악성앱"),
        ("신고/상담 창구로 맞는 것은?", [2,1,0], "신고"),
    ]
    for idx, (qtext, order, key) in enumerate(seeds):
        opts = pool[idx % len(pool)][:]
        # order를 이용해 정답 인덱스 결정(항상 안전 선택이 index 1이 되도록 구성)
        # 안전 옵션 후보를 중앙에 배치
        opts = [opts[i] for i in order]
        answer = opts.index([  # 안전한 선택 키워드 추정
            "공식앱/웹으로 직접 확인", "대표번호 재확인", "은행 공식 앱/콜센터",
            "통화 종료→대표번호 재확인", "도메인 확인", "112 신고",
            "1332 상담", "음성/영상으로 본인 확인"
        ][0]) if False else 1  # 위 추정은 복잡하니 중앙(1번)을 정답으로 고정
        variants.append((qtext, opts, answer, key))
    # 베이스 5 + 가변 5 = 10
    items = base + variants
    # 보기/문항 순서 섞기
    mixed = []
    for q, opts, a, key in items:
        order = list(range(len(opts)))
        random.shuffle(order)
        new_opts = [opts[i] for i in order]
        new_a = order.index(a)
        mixed.append((q, new_opts, new_a, key))
    random.shuffle(mixed)
    return mixed[:10]

# ----------------------------
# 시나리오·난이도 선택 UI
# ----------------------------
SCENARIOS = list(BASE.keys())
col = st.container()
with col:
    st.markdown('<div class="card">', unsafe_allow_html=True)
    s1, s2 = st.columns(2)
    with s1:
        scenario = st.selectbox("시나리오 선택", SCENARIOS, index=0)
        st.caption(BASE[scenario]["easy"][0][0])  # 미니캡션 대체
        st.write(f"📝 {BASE[scenario]['easy'][0][0].split('문자를')[0].strip()} · "
                 f"<span class='badge'>{scenario}</span>", unsafe_allow_html=True)
    with s2:
        difficulty = st.selectbox("난이도 선택", ["easy","normal","hard"], index=1,
                                  format_func=lambda x: {"easy":"🟢 easy","normal":"🟡 normal","hard":"🔴 hard"}[x])
    count = st.slider("문항 수", min_value=3, max_value=10, value=5, step=1)
    if st.button("퀴즈 시작 🎯", use_container_width=True):
        st.session_state.quiz = {
            "scenario": scenario,
            "difficulty": difficulty,
            "qs": build_ten(scenario, difficulty),
            "idx": 0,
            "score": 0,
            "count": count,
        }
        st.success("퀴즈를 시작합니다!")
    st.markdown('</div>', unsafe_allow_html=True)

# ----------------------------
# 퀴즈 진행
# ----------------------------
if "quiz" in st.session_state:
    qpack = st.session_state.quiz
    qs = qpack["qs"][:qpack["count"]]  # 사용자가 고른 개수만
    idx = qpack["idx"]

    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.write(f"진행률: **{idx}/{len(qs)}**")
    st.progress(idx/len(qs) if len(qs) else 0)

    if idx < len(qs):
        q, opts, answer, key = qs[idx]
        st.subheader(f"문제 {idx+1} / {len(qs)}  ·  {qpack['scenario']} · {qpack['difficulty']}")
        choice = st.radio("선택", opts, key=f"ch_{idx}", index=None)
        # 제출 → 해설 표시, 다음으로 넘어가는 버튼 분리
        if st.button("정답 확인 ✅", key=f"check_{idx}", use_container_width=True, disabled=(choice is None)):
            st.session_state.last_choice = choice
            st.session_state.last_correct = (opts.index(choice) == answer)
            st.session_state.show_explain = True

        if st.session_state.get("show_explain"):
            ok = st.session_state.get("last_correct", False)
            user = st.session_state.get("last_choice", None)
            st.divider()
            if ok:
                st.success("정답입니다! 👍")
                qpack["score"] += 1
            else:
                if user is None:
                    st.error("선택 후 확인을 눌러 주세요.")
                else:
                    st.error(f"오답입니다. 선택: **{user}**")

            st.markdown("#### 💬 해설")
            st.markdown(explain(qpack["scenario"], key))
            if st.button("다음 문제 ➜", use_container_width=True):
                st.session_state.show_explain = False
                st.session_state.last_choice = None
                st.session_state.last_correct = None
                qpack["idx"] += 1
        st.markdown('</div>', unsafe_allow_html=True)

    else:
        st.success(f"🎉 완료! 점수 **{qpack['score']} / {len(qs)}**")
        if st.button("다시 시작 🔁", use_container_width=True):
            del st.session_state["quiz"]
            st.rerun()